/**
 * TESTES DO COMPONENTE - CouponsSection
 * 
 * Conjunto de testes para validar o comportamento e funcionalidades
 * do componente CouponsSection.
 * 
 * Cobertura:
 * - RenderizaÃ§Ã£o correta
 * - ExibiÃ§Ã£o de estatÃ­sticas
 * - InteraÃ§Ãµes com tabela
 * - Busca e filtros
 * - Abertura de diÃ¡logos
 * - Estados de loading e erro
 * - AÃ§Ãµes de CRUD
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import '@testing-library/jest-dom';

// UtilitÃ¡rios de teste
import { renderWithProviders, createMockCoupon } from '../../../../test-utils';

// Componente sendo testado
import CouponsSection from '../CouponsSection';

// Mock do hook
jest.mock('../../../../hooks/useCouponsManager', () => ({
  useCouponsManager: jest.fn()
}));

import { useCouponsManager } from '../../../../hooks/useCouponsManager';

/**
 * DADOS MOCK PARA TESTES
 */
const mockCoupons = [
  createMockCoupon({
    id: 1,
    code: 'TESTE10',
    description: 'Cupom de teste para renderizaÃ§Ã£o',
    type: 'percentage',
    value: 10,
    isActive: true,
    currentUsage: 25,
    usageLimit: 100
  }),
  createMockCoupon({
    id: 2,
    code: 'FIXO20',
    description: 'Desconto fixo de teste',
    type: 'fixed_amount',
    value: 20.00,
    isActive: false,
    currentUsage: 10,
    usageLimit: null
  })
];

const mockStatistics = {
  total: 2,
  active: 1,
  expired: 0,
  firstPurchaseOnly: 0,
  totalUsage: 35
};

/**
 * HELPER: Mock padrÃ£o do hook
 */
const createMockHook = (overrides = {}) => ({
  coupons: mockCoupons,
  allCoupons: mockCoupons,
  loading: false,
  error: null,
  searchTerm: '',
  selectedCoupon: null,
  isCreateDialogOpen: false,
  isEditDialogOpen: false,
  isDeleteDialogOpen: false,
  statistics: mockStatistics,
  emptyCoupon: {},
  handleAddCoupon: jest.fn(),
  handleEditCoupon: jest.fn(),
  handleDeleteCoupon: jest.fn(),
  handleToggleStatus: jest.fn(),
  setSearchTerm: jest.fn(),
  openCreateDialog: jest.fn(),
  openEditDialog: jest.fn(),
  openDeleteDialog: jest.fn(),
  closeAllDialogs: jest.fn(),
  validateCoupon: jest.fn(),
  clearError: jest.fn(),
  ...overrides
});

/**
 * SUITE DE TESTES PRINCIPAL
 */
describe('CouponsSection', () => {
  // ConfiguraÃ§Ã£o antes de cada teste
  beforeEach(() => {
    jest.clearAllMocks();
    useCouponsManager.mockReturnValue(createMockHook());
  });

  /**
   * GRUPO: Testes de RenderizaÃ§Ã£o
   */
  describe('RenderizaÃ§Ã£o', () => {
    /**
     * TESTE: RenderizaÃ§Ã£o bÃ¡sica
     * Verifica se componente renderiza corretamente com dados bÃ¡sicos
     */
    test('deve renderizar o cabeÃ§alho da seÃ§Ã£o corretamente', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar elementos do cabeÃ§alho
      expect(screen.getByText('ðŸ’³ Cupons de Desconto')).toBeInTheDocument();
      expect(screen.getByText(/Gerencie cupons promocionais/)).toBeInTheDocument();
    });

    /**
     * TESTE: RenderizaÃ§Ã£o de estatÃ­sticas
     * Verifica se cards de estatÃ­sticas sÃ£o exibidos corretamente
     */
    test('deve renderizar cards de estatÃ­sticas', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar cards de estatÃ­sticas
      expect(screen.getByText('Total de Cupons')).toBeInTheDocument();
      expect(screen.getByText('Cupons Ativos')).toBeInTheDocument();
      expect(screen.getByText('Primeira Compra')).toBeInTheDocument();
      expect(screen.getByText('Total de Usos')).toBeInTheDocument();
      
      // Verificar valores das estatÃ­sticas
      expect(screen.getByText('2')).toBeInTheDocument(); // Total
      expect(screen.getByText('1')).toBeInTheDocument(); // Active
      expect(screen.getByText('35')).toBeInTheDocument(); // Total usage
    });

    /**
     * TESTE: Campo de busca
     * Verifica se campo de busca Ã© renderizado corretamente
     */
    test('deve renderizar campo de busca', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar campo de busca
      const searchInput = screen.getByPlaceholderText(/Buscar cupons por cÃ³digo ou descriÃ§Ã£o/);
      expect(searchInput).toBeInTheDocument();
    });

    /**
     * TESTE: BotÃ£o de criar cupom
     * Verifica se botÃ£o de criaÃ§Ã£o Ã© renderizado
     */
    test('deve renderizar botÃ£o de criar novo cupom', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar botÃ£o
      const createButton = screen.getByText('Novo Cupom');
      expect(createButton).toBeInTheDocument();
    });

    /**
     * TESTE: Tabela de cupons
     * Verifica se tabela com cupons Ã© renderizada
     */
    test('deve renderizar tabela com cupons', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar cabeÃ§alhos da tabela
      expect(screen.getByText('Cupom')).toBeInTheDocument();
      expect(screen.getByText('DescriÃ§Ã£o')).toBeInTheDocument();
      expect(screen.getByText('Desconto')).toBeInTheDocument();
      expect(screen.getByText('Validade')).toBeInTheDocument();
      expect(screen.getByText('Dias Ativos')).toBeInTheDocument();
      expect(screen.getByText('Uso')).toBeInTheDocument();
      expect(screen.getByText('AÃ§Ãµes')).toBeInTheDocument();

      // Verificar dados dos cupons
      expect(screen.getByText('TESTE10')).toBeInTheDocument();
      expect(screen.getByText('FIXO20')).toBeInTheDocument();
    });
  });

  /**
   * GRUPO: Testes de Estados
   */
  describe('Estados do Componente', () => {
    /**
     * TESTE: Estado de loading
     * Verifica se skeleton Ã© exibido durante carregamento
     */
    test('deve exibir skeleton durante loading', () => {
      // ARRANGE: Mock com loading ativo
      useCouponsManager.mockReturnValue(createMockHook({ loading: true }));

      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar que nÃ£o hÃ¡ dados de cupons exibidos durante loading
      expect(screen.queryByText('TESTE10')).not.toBeInTheDocument();
      expect(screen.queryByText('FIXO20')).not.toBeInTheDocument();
      
      // Verificar que a tabela ainda estÃ¡ presente
      expect(screen.getByText('Cupom')).toBeInTheDocument();
    });

    /**
     * TESTE: Estado de erro
     * Verifica se alerta de erro Ã© exibido
     */
    test('deve exibir alerta de erro quando hÃ¡ erro', () => {
      // ARRANGE: Mock com erro
      const errorMessage = 'Erro ao carregar cupons';
      useCouponsManager.mockReturnValue(createMockHook({ 
        error: errorMessage 
      }));

      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar alerta de erro
      expect(screen.getByText(errorMessage)).toBeInTheDocument();
      expect(screen.getByRole('alert')).toBeInTheDocument();
    });

    /**
     * TESTE: Estado vazio
     * Verifica se mensagem de estado vazio Ã© exibida
     */
    test('deve exibir mensagem quando nÃ£o hÃ¡ cupons', () => {
      // ARRANGE: Mock sem cupons
      useCouponsManager.mockReturnValue(createMockHook({ 
        coupons: [],
        statistics: { ...mockStatistics, total: 0 }
      }));

      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar mensagem de estado vazio
      expect(screen.getByText('Nenhum cupom cadastrado')).toBeInTheDocument();
      expect(screen.getByText(/Comece criando seu primeiro cupom/)).toBeInTheDocument();
    });

    /**
     * TESTE: Estado de busca sem resultados
     * Verifica mensagem quando busca nÃ£o encontra cupons
     */
    test('deve exibir mensagem quando busca nÃ£o encontra cupons', () => {
      // ARRANGE: Mock com busca ativa mas sem resultados
      useCouponsManager.mockReturnValue(createMockHook({ 
        coupons: [],
        searchTerm: 'INEXISTENTE'
      }));

      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar mensagem de busca vazia
      expect(screen.getByText('Nenhum cupom encontrado')).toBeInTheDocument();
      expect(screen.getByText(/Tente ajustar os filtros/)).toBeInTheDocument();
    });
  });

  /**
   * GRUPO: Testes de InteraÃ§Ã£o
   */
  describe('InteraÃ§Ãµes do UsuÃ¡rio', () => {
    /**
     * TESTE: Busca por cupons
     * Verifica se busca funciona corretamente
     */
    test('deve permitir buscar cupons', async () => {
      // ARRANGE: Mock setup e user
      const mockSetSearchTerm = jest.fn();
      useCouponsManager.mockReturnValue(createMockHook({ 
        setSearchTerm: mockSetSearchTerm 
      }));
      const user = userEvent.setup();

      // ACT: Renderizar e interagir
      renderWithProviders(<CouponsSection />);
      const searchInput = screen.getByPlaceholderText(/Buscar cupons por cÃ³digo ou descriÃ§Ã£o/);
      await user.type(searchInput, 'TESTE');

      // ASSERT: Verificar se funÃ§Ã£o foi chamada (userEvent chama para cada caractere)
      await waitFor(() => {
        expect(mockSetSearchTerm).toHaveBeenCalledWith('E'); // Ãšltimo caractere
      });
      
      // Verificar que foi chamada mÃºltiplas vezes
      expect(mockSetSearchTerm).toHaveBeenCalledTimes(5); // T-E-S-T-E
    });

    /**
     * TESTE: Abrir diÃ¡logo de criaÃ§Ã£o
     * Verifica se clique no botÃ£o abre diÃ¡logo de criaÃ§Ã£o
     */
    test('deve abrir diÃ¡logo de criaÃ§Ã£o ao clicar em novo cupom', async () => {
      // ARRANGE: Mock setup e user
      const mockOpenCreateDialog = jest.fn();
      useCouponsManager.mockReturnValue(createMockHook({ 
        openCreateDialog: mockOpenCreateDialog 
      }));
      const user = userEvent.setup();

      // ACT: Renderizar e clicar
      renderWithProviders(<CouponsSection />);
      const createButton = screen.getByText('Novo Cupom');
      await user.click(createButton);

      // ASSERT: Verificar se funÃ§Ã£o foi chamada
      expect(mockOpenCreateDialog).toHaveBeenCalledTimes(1);
    });

    /**
     * TESTE: AÃ§Ãµes na tabela - Editar
     * Verifica se botÃ£o de editar funciona
     */
    test('deve abrir diÃ¡logo de ediÃ§Ã£o ao clicar em editar', async () => {
      // ARRANGE: Mock setup e user
      const mockOpenEditDialog = jest.fn();
      useCouponsManager.mockReturnValue(createMockHook({ 
        openEditDialog: mockOpenEditDialog 
      }));
      const user = userEvent.setup();

      // ACT: Renderizar e clicar no botÃ£o editar
      renderWithProviders(<CouponsSection />);
      const editButtons = screen.getAllByLabelText(/Editar cupom/);
      await user.click(editButtons[0]);

      // ASSERT: Verificar se funÃ§Ã£o foi chamada com cupom correto
      expect(mockOpenEditDialog).toHaveBeenCalledWith(mockCoupons[0]);
    });

    /**
     * TESTE: AÃ§Ãµes na tabela - Excluir
     * Verifica se botÃ£o de excluir funciona
     */
    test('deve abrir diÃ¡logo de exclusÃ£o ao clicar em excluir', async () => {
      // ARRANGE: Mock setup e user
      const mockOpenDeleteDialog = jest.fn();
      useCouponsManager.mockReturnValue(createMockHook({ 
        openDeleteDialog: mockOpenDeleteDialog 
      }));
      const user = userEvent.setup();

      // ACT: Renderizar e clicar no botÃ£o excluir
      renderWithProviders(<CouponsSection />);
      const deleteButtons = screen.getAllByLabelText(/Excluir cupom/);
      await user.click(deleteButtons[0]);

      // ASSERT: Verificar se funÃ§Ã£o foi chamada com cupom correto
      expect(mockOpenDeleteDialog).toHaveBeenCalledWith(mockCoupons[0]);
    });

    /**
     * TESTE: Toggle status do cupom
     * Verifica se alternÃ¢ncia de status funciona
     */
    test('deve alternar status do cupom ao clicar no botÃ£o', async () => {
      // ARRANGE: Mock setup e user
      const mockToggleStatus = jest.fn();
      useCouponsManager.mockReturnValue(createMockHook({ 
        handleToggleStatus: mockToggleStatus 
      }));
      const user = userEvent.setup();

      // ACT: Renderizar e clicar no botÃ£o de status
      renderWithProviders(<CouponsSection />);
      const statusButtons = screen.getAllByLabelText(/Desativar|Ativar/);
      await user.click(statusButtons[0]);

      // ASSERT: Verificar se funÃ§Ã£o foi chamada
      expect(mockToggleStatus).toHaveBeenCalledWith(mockCoupons[0].id);
    });
  });

  /**
   * GRUPO: Testes de ExibiÃ§Ã£o de Dados
   */
  describe('ExibiÃ§Ã£o de Dados', () => {
    /**
     * TESTE: FormataÃ§Ã£o de valores
     * Verifica se valores sÃ£o formatados corretamente
     */
    test('deve formatar valores corretamente na tabela', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar formataÃ§Ã£o de porcentagem
      expect(screen.getByText('10%')).toBeInTheDocument();
      
      // ASSERT: Verificar formataÃ§Ã£o de moeda
      expect(screen.getByText('R$ 20,00')).toBeInTheDocument();
    });

    /**
     * TESTE: ExibiÃ§Ã£o de chips de status
     * Verifica se chips de status sÃ£o exibidos corretamente
     */
    test('deve exibir chips de status corretamente', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar chips de status
      expect(screen.getByText('Ativo')).toBeInTheDocument();
      expect(screen.getByText('Inativo')).toBeInTheDocument();
    });

    /**
     * TESTE: ExibiÃ§Ã£o de dias da semana
     * Verifica se dias ativos sÃ£o exibidos como chips
     */
    test('deve exibir dias da semana ativos como chips', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar presenÃ§a de chips de dias
      // Os dias especÃ­ficos dependem dos dados mock
      const dayChips = screen.getAllByText(/Seg|Ter|Qua|Qui|Sex|SÃ¡b|Dom/);
      expect(dayChips.length).toBeGreaterThan(0);
    });

    /**
     * TESTE: CÃ¡lculo de uso
     * Verifica se porcentagem de uso Ã© calculada e exibida
     */
    test('deve calcular e exibir porcentagem de uso quando hÃ¡ limite', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar cÃ¡lculo de uso (25/100 = 25%)
      expect(screen.getByText('25% usado')).toBeInTheDocument();
    });
  });

  /**
   * GRUPO: Testes de DiÃ¡logos
   */
  describe('RenderizaÃ§Ã£o de DiÃ¡logos', () => {
    /**
     * TESTE: RenderizaÃ§Ã£o de diÃ¡logos quando fechados
     * Verifica se diÃ¡logos nÃ£o aparecem quando fechados
     */
    test('nÃ£o deve renderizar diÃ¡logos quando fechados', () => {
      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar que diÃ¡logos nÃ£o estÃ£o visÃ­veis
      expect(screen.queryByText('Criar Novo Cupom')).not.toBeInTheDocument();
      expect(screen.queryByText('Editar Cupom')).not.toBeInTheDocument();
      expect(screen.queryByText('Confirmar ExclusÃ£o')).not.toBeInTheDocument();
    });

    /**
     * TESTE: RenderizaÃ§Ã£o de diÃ¡logo de criaÃ§Ã£o aberto
     * Verifica se diÃ¡logo aparece quando deve estar aberto
     */
    test('deve renderizar diÃ¡logo de criaÃ§Ã£o quando aberto', () => {
      // ARRANGE: Mock com diÃ¡logo aberto
      useCouponsManager.mockReturnValue(createMockHook({ 
        isCreateDialogOpen: true 
      }));

      // ACT: Renderizar componente
      renderWithProviders(<CouponsSection />);

      // ASSERT: Verificar que diÃ¡logo estÃ¡ presente
      expect(screen.getByText('Criar Novo Cupom')).toBeInTheDocument();
    });
  });
});
