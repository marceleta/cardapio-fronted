/**
 * TESTES DO COMPONENTE - DI√ÅLOGO DE PRODUTO
 * 
 * Conjunto de testes para validar o comportamento e funcionalidades
 * do componente de di√°logo para cria√ß√£o e edi√ß√£o de produtos.
 * 
 * Cobertura:
 * - Renderiza√ß√£o do di√°logo
 * - Formul√°rio de produto (cria√ß√£o e edi√ß√£o)
 * - Valida√ß√£o de campos obrigat√≥rios
 * - Sele√ß√£o de categorias
 * - Formata√ß√£o de pre√ßos
 * - Intera√ß√µes de usu√°rio
 * - Estados de abertura/fechamento
 * - Submiss√£o de dados
 */

import React from 'react';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { ThemeProvider, createTheme } from '@mui/material/styles';
import ProductDialog from '../ProductDialog';

/**
 * HELPER: Wrapper com ThemeProvider para Material-UI
 */
const ThemeWrapper = ({ children }) => {
  const theme = createTheme();
  return <ThemeProvider theme={theme}>{children}</ThemeProvider>;
};

/**
 * HELPER: Categorias mock
 */
const mockCategories = ['Pizzas', 'Hamb√∫rgueres', 'Bebidas', 'Sobremesas'];

/**
 * HELPER: Renderiza componente com props padr√£o
 */
const renderProductDialog = (props = {}) => {
  const defaultProps = {
    open: true,
    onClose: jest.fn(),
    product: null,
    categories: mockCategories,
    onSave: jest.fn()
  };

  return render(
    <ThemeWrapper>
      <ProductDialog {...defaultProps} {...props} />
    </ThemeWrapper>
  );
};

/**
 * SUITE DE TESTES PRINCIPAL
 */
describe('ProductDialog', () => {
  // Limpar mocks antes de cada teste
  beforeEach(() => {
    jest.clearAllMocks();
  });

  /**
   * GRUPO: Testes de Renderiza√ß√£o
   */
  describe('Renderiza√ß√£o', () => {
    /**
     * TESTE: Di√°logo n√£o renderizado quando fechado
     * Verifica se di√°logo n√£o aparece quando open √© false
     */
    test('n√£o deve renderizar quando open √© false', () => {
      // ACT: Renderizar di√°logo fechado
      renderProductDialog({ open: false });

      // ASSERT: Di√°logo n√£o deve estar vis√≠vel
      expect(screen.queryByText('Adicionar Produto')).not.toBeInTheDocument();
      expect(screen.queryByText('Editar Produto')).not.toBeInTheDocument();
    });

    /**
     * TESTE: Renderiza√ß√£o do di√°logo de novo produto
     * Verifica se di√°logo aparece corretamente para cria√ß√£o
     */
    test('deve renderizar di√°logo para novo produto', () => {
      // ACT: Renderizar para novo produto
      renderProductDialog({ product: null });

      // ASSERT: Verificar elementos de cria√ß√£o
      expect(screen.getByText('üçΩÔ∏è Adicionar Produto')).toBeInTheDocument();
      expect(screen.getByRole('textbox', { name: /nome/i })).toBeInTheDocument();
      expect(screen.getByRole('textbox', { name: /descri√ß√£o/i })).toBeInTheDocument();
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toBeInTheDocument();
      expect(screen.getByRole('combobox')).toBeInTheDocument();
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).toBeInTheDocument();
      expect(screen.getByText('Cancelar')).toBeInTheDocument();
      expect(screen.getByText('Salvar')).toBeInTheDocument();
    });

    /**
     * TESTE: Renderiza√ß√£o do di√°logo de edi√ß√£o
     * Verifica se di√°logo aparece corretamente para edi√ß√£o
     */
    test('deve renderizar di√°logo para editar produto', () => {
      // ARRANGE: Produto para edi√ß√£o
      const produto = {
        id: 1,
        name: 'Pizza Margherita',
        description: 'Pizza cl√°ssica com molho e queijo',
        price: 25.90,
        category: 'Pizzas',
        imageUrl: 'https://exemplo.com/pizza.jpg'
      };

      // ACT: Renderizar para edi√ß√£o
      renderProductDialog({ product: produto });

      // ASSERT: Verificar elementos de edi√ß√£o
      expect(screen.getByText('‚úèÔ∏è Editar Produto')).toBeInTheDocument();
    });

    /**
     * TESTE: Todos os campos est√£o presentes
     * Verifica se todos os campos necess√°rios s√£o renderizados
     */
    test('deve renderizar todos os campos do formul√°rio', () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ASSERT: Verificar campos
      expect(screen.getByRole('textbox', { name: /nome/i })).toBeInTheDocument();
      expect(screen.getByRole('textbox', { name: /descri√ß√£o/i })).toBeInTheDocument();
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toBeInTheDocument();
      expect(screen.getByRole('combobox')).toBeInTheDocument();
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).toBeInTheDocument();
      expect(screen.getByLabelText('Exibir no card√°pio para clientes')).toBeInTheDocument();
      
      // ASSERT: Verificar placeholder
      expect(screen.getByPlaceholderText('https://exemplo.com/imagem.jpg')).toBeInTheDocument();
    });

    /**
     * TESTE: Dropdown de categorias
     * Verifica se todas as categorias est√£o dispon√≠veis
     */
    test('deve renderizar todas as categorias no dropdown', async () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ACT: Abrir dropdown de categoria
      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      // ASSERT: Verificar op√ß√µes de categoria
      await waitFor(() => {
        expect(screen.getByRole('option', { name: 'Pizzas' })).toBeInTheDocument();
        expect(screen.getByRole('option', { name: 'Hamb√∫rgueres' })).toBeInTheDocument();
        expect(screen.getByRole('option', { name: 'Bebidas' })).toBeInTheDocument();
        expect(screen.getByRole('option', { name: 'Sobremesas' })).toBeInTheDocument();
      });
    });
  });

  /**
   * GRUPO: Testes de Estado do Formul√°rio
   */
  describe('Estado do Formul√°rio', () => {
    /**
     * TESTE: Formul√°rio vazio para novo produto
     * Verifica se campos est√£o vazios para cria√ß√£o
     */
    test('deve inicializar formul√°rio vazio para novo produto', () => {
      // ACT: Renderizar para novo produto
      renderProductDialog({ product: null });

      // ASSERT: Verificar campos vazios
      expect(screen.getByRole('textbox', { name: /nome/i })).toHaveValue('');
      expect(screen.getByRole('textbox', { name: /descri√ß√£o/i })).toHaveValue('');
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toHaveValue(null);
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).toHaveValue('');
      
      // ASSERT: Categoria deve estar vazia inicialmente
      const categorySelect = screen.getByRole('combobox');
      expect(categorySelect).toHaveAttribute('aria-expanded', 'false');
      
      // ASSERT: Visibilidade deve estar ativa por padr√£o
      expect(screen.getByRole('switch')).toBeChecked();
    });

    /**
     * TESTE: Formul√°rio preenchido para edi√ß√£o
     * Verifica se campos s√£o preenchidos com dados do produto
     */
    test('deve preencher formul√°rio com dados do produto para edi√ß√£o', () => {
      // ARRANGE: Produto existente
      const produto = {
        id: 2,
        name: 'Hamb√∫rguer Cl√°ssico',
        description: 'Hamb√∫rguer com carne, alface e tomate',
        price: 18.50,
        category: 'Hamb√∫rgueres',
        imageUrl: 'https://exemplo.com/hamburguer.jpg',
        visibleInMenu: false
      };

      // ACT: Renderizar para edi√ß√£o
      renderProductDialog({ product: produto });

      // ASSERT: Verificar campos preenchidos
      expect(screen.getByRole('textbox', { name: /nome/i })).toHaveValue('Hamb√∫rguer Cl√°ssico');
      expect(screen.getByRole('textbox', { name: /descri√ß√£o/i })).toHaveValue('Hamb√∫rguer com carne, alface e tomate');
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toHaveValue(18.5);
      expect(screen.getByRole('combobox')).toHaveTextContent('Hamb√∫rgueres');
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).toHaveValue('https://exemplo.com/hamburguer.jpg');
      expect(screen.getByRole('switch')).not.toBeChecked();
    });

    /**
     * TESTE: Reset do formul√°rio ao fechar e reabrir
     * Verifica se formul√°rio √© resetado entre usos
     */
    test('deve resetar formul√°rio ao reabrir di√°logo', () => {
      // ARRANGE: Renderizar e preencher formul√°rio
      const { rerender } = renderProductDialog();

      // ACT: Preencher campos
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto Teste' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '15.90' }
      });

      // ACT: Fechar e reabrir di√°logo
      rerender(
        <ThemeWrapper>
          <ProductDialog
            open={false}
            onClose={jest.fn()}
            product={null}
            categories={mockCategories}
            onSave={jest.fn()}
          />
        </ThemeWrapper>
      );

      rerender(
        <ThemeWrapper>
          <ProductDialog
            open={true}
            onClose={jest.fn()}
            product={null}
            categories={mockCategories}
            onSave={jest.fn()}
          />
        </ThemeWrapper>
      );

      // ASSERT: Campos devem estar vazios novamente
      expect(screen.getByRole('textbox', { name: /nome/i })).toHaveValue('');
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toHaveValue(null);
    });

    /**
     * TESTE: Tratamento de produto com dados incompletos
     * Verifica se componente lida com dados faltantes
     */
    test('deve lidar com produto com dados incompletos', () => {
      // ARRANGE: Produto com dados parciais
      const produtoIncompleto = {
        id: 3,
        name: 'Apenas Nome',
        price: 10.00
        // description, category e imageUrl ausentes
      };

      // ACT: Renderizar com dados incompletos
      renderProductDialog({ product: produtoIncompleto });

      // ASSERT: Campos ausentes devem ter valores padr√£o
      expect(screen.getByRole('textbox', { name: /nome/i })).toHaveValue('Apenas Nome');
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toHaveValue(10);
      expect(screen.getByRole('textbox', { name: /descri√ß√£o/i })).toHaveValue('');
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).toHaveValue('');
      expect(screen.getByRole('combobox')).toHaveAttribute('aria-expanded', 'false');
    });

    /**
     * TESTE: Tratamento de lista de categorias vazia
     * Verifica comportamento quando n√£o h√° categorias
     */
    test('deve lidar com lista de categorias vazia', () => {
      // ACT: Renderizar com categorias vazias
      renderProductDialog({ categories: [] });

      // ASSERT: Campo categoria deve estar vazio
      expect(screen.getByRole('combobox')).toHaveAttribute('aria-expanded', 'false');
    });
  });

  /**
   * GRUPO: Testes de Intera√ß√£o do Usu√°rio
   */
  describe('Intera√ß√£o do Usu√°rio', () => {
    /**
     * TESTE: Digita√ß√£o nos campos de texto
     * Verifica se usu√°rio pode digitar nos campos
     */
    test('deve permitir digita√ß√£o nos campos de texto', () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ACT: Digitar nos campos
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto Teste' }
      });

      fireEvent.change(screen.getByRole('textbox', { name: /descri√ß√£o/i }), {
        target: { value: 'Descri√ß√£o do produto teste' }
      });

      fireEvent.change(screen.getByRole('textbox', { name: /url da imagem/i }), {
        target: { value: 'https://teste.com/imagem.jpg' }
      });

      // ASSERT: Verificar valores atualizados
      expect(screen.getByRole('textbox', { name: /nome/i })).toHaveValue('Produto Teste');
      expect(screen.getByRole('textbox', { name: /descri√ß√£o/i })).toHaveValue('Descri√ß√£o do produto teste');
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).toHaveValue('https://teste.com/imagem.jpg');
    });

    /**
     * TESTE: Digita√ß√£o no campo de pre√ßo
     * Verifica se campo num√©rico funciona corretamente
     */
    test('deve permitir digita√ß√£o de valores num√©ricos no pre√ßo', () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ACT: Digitar pre√ßo
      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '25.90' }
      });

      // ASSERT: Verificar valor
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toHaveValue(25.9);
    });

    /**
     * TESTE: Sele√ß√£o de categoria
     * Verifica se sele√ß√£o de categoria funciona
     */
    test('deve permitir sele√ß√£o de categoria', async () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ACT: Abrir dropdown e selecionar categoria
      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Bebidas' }));
      });

      // ASSERT: Categoria deve ser atualizada
      expect(screen.getByRole('combobox')).toHaveTextContent('Bebidas');
    });

    /**
     * TESTE: Bot√£o cancelar
     * Verifica se bot√£o cancelar chama onClose
     */
    test('deve chamar onClose ao clicar em cancelar', () => {
      // ARRANGE: Mock da fun√ß√£o
      const mockOnClose = jest.fn();

      // ACT: Renderizar di√°logo
      renderProductDialog({ onClose: mockOnClose });

      // ACT: Clicar em cancelar
      fireEvent.click(screen.getByText('Cancelar'));

      // ASSERT: Fun√ß√£o deve ter sido chamada
      expect(mockOnClose).toHaveBeenCalledTimes(1);
    });

    /**
     * TESTE: Fechamento por ESC
     * Verifica se di√°logo fecha com tecla ESC
     */
    test('deve chamar onClose ao pressionar ESC', async () => {
      // ARRANGE: Mock da fun√ß√£o
      const mockOnClose = jest.fn();

      // ACT: Renderizar di√°logo
      renderProductDialog({ onClose: mockOnClose });

      // ACT: Pressionar ESC no di√°logo
      const dialog = screen.getByRole('dialog');
      fireEvent.keyDown(dialog, { key: 'Escape' });

      // ASSERT: Fun√ß√£o onClose deve ter sido chamada
      await waitFor(() => {
        expect(mockOnClose).toHaveBeenCalled();
      });
    });
  });

  /**
   * GRUPO: Testes de Valida√ß√£o
   */
  describe('Valida√ß√£o', () => {
    /**
     * TESTE: Bot√£o salvar desabilitado com campos obrigat√≥rios vazios
     * Verifica se valida√ß√£o dos campos obrigat√≥rios funciona
     */
    test('deve desabilitar bot√£o salvar com campos obrigat√≥rios vazios', () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ASSERT: Bot√£o deve estar desabilitado inicialmente
      const saveButton = screen.getByText('Salvar');
      expect(saveButton).toBeDisabled();
    });

    /**
     * TESTE: Bot√£o salvar habilitado com todos os campos obrigat√≥rios preenchidos
     * Verifica se bot√£o √© habilitado quando valida√ß√£o passa
     */
    test('deve habilitar bot√£o salvar com todos os campos obrigat√≥rios preenchidos', async () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ACT: Preencher campos obrigat√≥rios
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto V√°lido' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '15.90' }
      });

      // ACT: Selecionar categoria
      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Pizzas' }));
      });

      // ASSERT: Bot√£o deve estar habilitado
      const saveButton = screen.getByText('Salvar');
      expect(saveButton).not.toBeDisabled();
    });

    /**
     * TESTE: Valida√ß√£o individual de campos
     * Verifica se cada campo obrigat√≥rio √© validado individualmente
     */
    test('deve validar campos obrigat√≥rios individualmente', async () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ACT: Preencher apenas nome
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto' }
      });

      // ASSERT: Bot√£o ainda deve estar desabilitado (falta pre√ßo e categoria)
      expect(screen.getByText('Salvar')).toBeDisabled();

      // ACT: Preencher pre√ßo
      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '10.00' }
      });

      // ASSERT: Bot√£o ainda deve estar desabilitado (falta categoria)
      expect(screen.getByText('Salvar')).toBeDisabled();

      // ACT: Selecionar categoria
      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Pizzas' }));
      });

      // ASSERT: Agora bot√£o deve estar habilitado
      expect(screen.getByText('Salvar')).not.toBeDisabled();
    });

    /**
     * TESTE: Valida√ß√£o de pre√ßo zero
     * Verifica se pre√ßo zero √© aceito
     */
    test('deve aceitar pre√ßo zero como v√°lido', async () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ACT: Preencher com pre√ßo zero
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto Gr√°tis' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '0' }
      });

      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Pizzas' }));
      });

      // ASSERT: Bot√£o deve estar habilitado
      expect(screen.getByText('Salvar')).not.toBeDisabled();
    });

    /**
     * TESTE: Campos obrigat√≥rios marcados visualmente
     * Verifica se campos obrigat√≥rios t√™m indica√ß√£o visual
     */
    test('deve marcar campos obrigat√≥rios visualmente', () => {
      // ACT: Renderizar di√°logo
      renderProductDialog();

      // ASSERT: Verificar atributos required
      expect(screen.getByRole('textbox', { name: /nome/i })).toHaveAttribute('required');
      expect(screen.getByRole('spinbutton', { name: /pre√ßo/i })).toHaveAttribute('required');
      expect(screen.getByRole('combobox')).toHaveAttribute('aria-required', 'true');
      
      // ASSERT: Campos n√£o obrigat√≥rios n√£o devem ter required
      expect(screen.getByRole('textbox', { name: /descri√ß√£o/i })).not.toHaveAttribute('required');
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).not.toHaveAttribute('required');
    });
  });

  /**
   * GRUPO: Testes de Submiss√£o
   */
  describe('Submiss√£o', () => {
    /**
     * TESTE: Submiss√£o de novo produto
     * Verifica se onSave √© chamado com dados corretos para cria√ß√£o
     */
    test('deve submeter dados de novo produto corretamente', async () => {
      // ARRANGE: Mock da fun√ß√£o
      const mockOnSave = jest.fn();

      // ACT: Renderizar di√°logo
      renderProductDialog({ 
        onSave: mockOnSave,
        product: null 
      });

      // ACT: Preencher formul√°rio
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Novo Produto' }
      });

      fireEvent.change(screen.getByRole('textbox', { name: /descri√ß√£o/i }), {
        target: { value: 'Descri√ß√£o do novo produto' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '29.90' }
      });

      fireEvent.change(screen.getByRole('textbox', { name: /url da imagem/i }), {
        target: { value: 'https://exemplo.com/produto.jpg' }
      });

      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByText('Sobremesas'));
      });

      // ACT: Clicar em salvar
      fireEvent.click(screen.getByText('Salvar'));

      // ASSERT: Verificar chamada de onSave
      expect(mockOnSave).toHaveBeenCalledWith({
        name: 'Novo Produto',
        description: 'Descri√ß√£o do novo produto',
        price: 29.90, // N√∫mero convertido
        category: 'Sobremesas',
        imageUrl: 'https://exemplo.com/produto.jpg',
        visibleInMenu: true
      });
    });

    /**
     * TESTE: Submiss√£o de produto editado
     * Verifica se onSave √© chamado com dados corretos para edi√ß√£o
     */
    test('deve submeter dados de produto editado corretamente', async () => {
      // ARRANGE: Mock da fun√ß√£o e produto existente
      const mockOnSave = jest.fn();
      const produtoExistente = {
        id: 5,
        name: 'Produto Original',
        description: 'Descri√ß√£o original',
        price: 20.00,
        category: 'Pizzas',
        imageUrl: 'https://original.com/image.jpg'
      };

      // ACT: Renderizar di√°logo
      renderProductDialog({ 
        onSave: mockOnSave,
        product: produtoExistente 
      });

      // ACT: Modificar dados
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto Modificado' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '25.50' }
      });

      // ACT: Salvar
      fireEvent.click(screen.getByText('Salvar'));

      // ASSERT: Verificar dados incluindo ID original
      expect(mockOnSave).toHaveBeenCalledWith({
        id: 5, // ID preservado para edi√ß√£o
        name: 'Produto Modificado',
        description: 'Descri√ß√£o original',
        price: 25.50,
        category: 'Pizzas',
        imageUrl: 'https://original.com/image.jpg',
        visibleInMenu: true
      });
    });

    /**
     * TESTE: Convers√£o de pre√ßo para n√∫mero
     * Verifica se pre√ßo √© convertido corretamente para n√∫mero
     */
    test('deve converter pre√ßo para n√∫mero na submiss√£o', async () => {
      // ARRANGE: Mock da fun√ß√£o
      const mockOnSave = jest.fn();

      // ACT: Renderizar e preencher
      renderProductDialog({ onSave: mockOnSave });

      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '15.50' }
      });

      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Pizzas' }));
      });

      // ACT: Salvar
      fireEvent.click(screen.getByText('Salvar'));

      // ASSERT: Pre√ßo deve ser n√∫mero
      expect(mockOnSave).toHaveBeenCalledWith(
        expect.objectContaining({
          price: 15.50 // N√∫mero, n√£o string
        })
      );
    });

    /**
     * TESTE: Tratamento de pre√ßo inv√°lido
     * Verifica se pre√ßo inv√°lido √© tratado como zero
     */
    test('deve tratar pre√ßo inv√°lido como zero', async () => {
      // ARRANGE: Mock da fun√ß√£o
      const mockOnSave = jest.fn();

      // ACT: Renderizar e preencher
      renderProductDialog({ onSave: mockOnSave });

      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '0' } // Zero √© tecnicamente um valor v√°lido que ser√° convertido
      });

      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Pizzas' }));
      });

      // ACT: Salvar
      fireEvent.click(screen.getByText('Salvar'));

      // ASSERT: Pre√ßo deve ser zero
      expect(mockOnSave).toHaveBeenCalledWith(
        expect.objectContaining({
          price: 0 // Valor padr√£o para entrada inv√°lida
        })
      );
    });

    /**
     * TESTE: Submiss√£o com campos opcionais vazios
     * Verifica se produto pode ser salvo com apenas campos obrigat√≥rios
     */
    test('deve permitir salvar com campos opcionais vazios', async () => {
      // ARRANGE: Mock da fun√ß√£o
      const mockOnSave = jest.fn();

      // ACT: Renderizar di√°logo
      renderProductDialog({ onSave: mockOnSave });

      // ACT: Preencher apenas campos obrigat√≥rios
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto M√≠nimo' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '10.00' }
      });

      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Pizzas' }));
      });

      // ACT: Salvar
      fireEvent.click(screen.getByText('Salvar'));

      // ASSERT: Deve salvar com campos opcionais vazios
      expect(mockOnSave).toHaveBeenCalledWith({
        name: 'Produto M√≠nimo',
        description: '',
        price: 10.00,
        category: 'Pizzas',
        imageUrl: '',
        visibleInMenu: true
      });
    });
  });

  /**
   * GRUPO: Testes de Casos Extremos
   */
  describe('Casos Extremos', () => {
    /**
     * TESTE: Produto com pre√ßo muito alto
     * Verifica se componente lida com valores monet√°rios altos
     */
    test('deve lidar com pre√ßos muito altos', async () => {
      // ARRANGE: Mock da fun√ß√£o
      const mockOnSave = jest.fn();

      // ACT: Renderizar e preencher
      renderProductDialog({ onSave: mockOnSave });

      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: 'Produto Caro' }
      });

      fireEvent.change(screen.getByRole('spinbutton', { name: /pre√ßo/i }), {
        target: { value: '9999.99' }
      });

      const categorySelect = screen.getByRole('combobox');
      fireEvent.mouseDown(categorySelect);

      await waitFor(() => {
        fireEvent.click(screen.getByRole('option', { name: 'Pizzas' }));
      });

      // ACT: Salvar
      fireEvent.click(screen.getByText('Salvar'));

      // ASSERT: Valor alto deve ser aceito
      expect(mockOnSave).toHaveBeenCalledWith(
        expect.objectContaining({
          price: 9999.99
        })
      );
    });

    /**
     * TESTE: Nome muito longo
     * Verifica se componente lida com textos longos
     */
    test('deve lidar com nome muito longo', () => {
      // ARRANGE: Nome extremamente longo
      const nomeLongo = 'A'.repeat(1000);

      // ACT: Renderizar e preencher
      renderProductDialog();
      fireEvent.change(screen.getByRole('textbox', { name: /nome/i }), {
        target: { value: nomeLongo }
      });

      // ASSERT: Campo deve aceitar texto longo
      expect(screen.getByRole('textbox', { name: /nome/i })).toHaveValue(nomeLongo);
    });

    /**
     * TESTE: URL de imagem inv√°lida
     * Verifica se componente aceita URLs malformadas
     */
    test('deve aceitar URL de imagem inv√°lida', () => {
      // ARRANGE: URL inv√°lida
      const urlInvalida = 'url-invalida-sem-protocolo';

      // ACT: Renderizar e preencher
      renderProductDialog();
      fireEvent.change(screen.getByRole('textbox', { name: /url da imagem/i }), {
        target: { value: urlInvalida }
      });

      // ASSERT: Campo deve aceitar URL inv√°lida (valida√ß√£o n√£o √© responsabilidade do componente)
      expect(screen.getByRole('textbox', { name: /url da imagem/i })).toHaveValue(urlInvalida);
    });

    /**
     * TESTE: Props undefined/null
     * Verifica robustez com props inv√°lidas
     */
    test('deve lidar com props undefined graciosamente', () => {
      // ACT: Renderizar com props undefined
      expect(() => {
        render(
          <ThemeWrapper>
            <ProductDialog
              open={true}
              onClose={undefined}
              product={undefined}
              categories={undefined}
              onSave={undefined}
            />
          </ThemeWrapper>
        );
      }).not.toThrow();

      // ASSERT: Componente deve renderizar
      expect(screen.getByText('üçΩÔ∏è Adicionar Produto')).toBeInTheDocument();
    });

    /**
     * TESTE: Lista de categorias nula
     * Verifica comportamento com categorias nulas
     */
    test('deve lidar com categorias nulas', () => {
      // ACT: Renderizar com categorias null
      expect(() => {
        renderProductDialog({ categories: null });
      }).not.toThrow();

      // ASSERT: Campo categoria deve estar presente
      expect(screen.getByRole('combobox')).toBeInTheDocument();
    });
  });
});
